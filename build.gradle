
import org.apache.tools.ant.filters.ReplaceTokens

buildscript { scriptHandler ->
    apply from: "${rootDir}/gradle/repositories.gradle", to: scriptHandler

    ext {
        springBootVersion = '1.5.3.RELEASE'
        springDependencyPluginVersion = '0.5.4.RELEASE'
        itextpdfVersion = '7.0.2'
        lombokVersion = ''
        newrelicVersion = '3.12.1'
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:${springDependencyPluginVersion}")
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"

    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: "net.ltgt.apt"



dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-parent:${springBootVersion}"
        mavenBom "com.google.guava:guava:19.0"
    }
}

apply from: "${rootDir}/gradle/repositories.gradle"

configurations {
    newrelic
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'com.fasterxml.jackson.core:jackson-annotations'
    compile 'com.fasterxml.jackson.core:jackson-core'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile "com.itextpdf:kernel:${itextpdfVersion}"
    compile "com.itextpdf:io:${itextpdfVersion}"
    compile "com.itextpdf:layout:${itextpdfVersion}"
    compile 'org.apache.pdfbox:pdfbox:2.0.5'
    compile 'org.apache.pdfbox:pdfbox-tools:2.0.5'
    compile 'com.google.cloud:google-cloud-vision:0.17.1-beta'
    compile "org.mockito:mockito-core:1.10.19"
    compile 'com.amazon.alexa:alexa-skills-kit:1.3.0'
    compile 'org.apache.commons:commons-collections4:4.1'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    apt "org.projectlombok:lombok:${lombokVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit:4.12'
    testRuntime 'com.h2database:h2'

    newrelic "com.newrelic.agent.java:newrelic-agent:${newrelicVersion}"
}

bootRun {
    addResources = true
    jvmArgs = [ "-Dgoogle_creds=\"${System.getenv('google_creds')}\"" ]
}

springBoot  {
    buildInfo()
    executable = true
    mainClass = 'com.caskalexa.CaskAlexaMain'
    agent = file("$buildDir/lib/newrelic.jar")
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

test {
    environment "GOOGLE_APPLICATION_CREDENTIALS", System.getenv('GOOGLE_APPLICATION_CREDENTIALS')
}

task copyNewrelic(type: Copy) {

    from(configurations.newrelic) {
        rename ("newrelic-agent-${newrelicVersion}.jar", 'newrelic.jar')
    }

    from('src/main/resources/newrelic.yml') {
        filter(ReplaceTokens, tokens: ['NEWRELIC_LICENSE': System.getenv('NEWRELIC_LICENSE')], beginToken : '${', endToken : '}')
    }

    into "$buildDir/lib"

}
project.tasks.jar.dependsOn([copyNewrelic])


